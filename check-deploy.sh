#!/bin/bash

# Script de V√©rification Pr√©-D√©ploiement
# √Ä ex√©cuter avant de pousser sur main

echo "üîç V√©rification Pr√©-D√©ploiement - synix.fr"
echo "=========================================="
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

errors=0
warnings=0

# 1. V√©rifier qu'on est sur la branche develop
echo "üìã V√©rification de la branche..."
current_branch=$(git branch --show-current)
if [ "$current_branch" != "develop" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Vous n'√™tes pas sur la branche develop (actuellement sur $current_branch)${NC}"
    warnings=$((warnings + 1))
else
    echo -e "${GREEN}‚úÖ Sur la branche develop${NC}"
fi
echo ""

# 2. V√©rifier que le code compile (frontend)
echo "üî® Build frontend..."
cd frontend
if npm run build -- --configuration=production > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Frontend build r√©ussi${NC}"
else
    echo -e "${RED}‚ùå Frontend build √©chou√©${NC}"
    errors=$((errors + 1))
fi
cd ..
echo ""

# 3. V√©rifier que backend d√©marre
echo "üî® V√©rification backend..."
cd backend
if node -e "require('./server.js')" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend syntaxe valide${NC}"
else
    echo -e "${RED}‚ùå Backend a des erreurs de syntaxe${NC}"
    errors=$((errors + 1))
fi
cd ..
echo ""

# 4. V√©rifier environment.prod.ts
echo "üåê V√©rification environment.prod.ts..."
if grep -q "https://synix.fr/api" frontend/src/environments/environment.prod.ts; then
    echo -e "${GREEN}‚úÖ API URL correcte pour production${NC}"
else
    echo -e "${RED}‚ùå API URL incorrecte dans environment.prod.ts${NC}"
    errors=$((errors + 1))
fi
echo ""

# 5. V√©rifier que .htaccess existe
echo "üìÑ V√©rification .htaccess..."
if [ -f "frontend/public/.htaccess" ]; then
    echo -e "${GREEN}‚úÖ .htaccess existe${NC}"
else
    echo -e "${RED}‚ùå .htaccess manquant${NC}"
    errors=$((errors + 1))
fi
echo ""

# 6. V√©rifier que .env n'est pas commit√©
echo "üîê V√©rification s√©curit√©..."
if git ls-files | grep -q "backend/\.env$"; then
    echo -e "${RED}‚ùå ATTENTION : .env est commit√© dans Git !${NC}"
    errors=$((errors + 1))
else
    echo -e "${GREEN}‚úÖ .env non commit√©${NC}"
fi
echo ""

# 7. V√©rifier les d√©pendances npm
echo "üì¶ V√©rification d√©pendances..."
cd frontend
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ Frontend node_modules pr√©sent${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Frontend node_modules manquant, installer avec: cd frontend && npm install${NC}"
    warnings=$((warnings + 1))
fi
cd ../backend
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ Backend node_modules pr√©sent${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Backend node_modules manquant, installer avec: cd backend && npm install${NC}"
    warnings=$((warnings + 1))
fi
cd ..
echo ""

# 8. V√©rifier que deploy.yml existe
echo "üöÄ V√©rification GitHub Actions..."
if [ -f ".github/workflows/deploy.yml" ]; then
    echo -e "${GREEN}‚úÖ deploy.yml existe${NC}"
else
    echo -e "${RED}‚ùå deploy.yml manquant${NC}"
    errors=$((errors + 1))
fi
echo ""

# R√©sum√©
echo "=========================================="
echo "üìä R√©sum√© de la V√©rification"
echo "=========================================="
if [ $errors -eq 0 ] && [ $warnings -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Tout est OK ! Pr√™t pour le d√©ploiement${NC}"
    echo ""
    echo "Pour d√©ployer sur synix.fr :"
    echo "  git checkout main"
    echo "  git merge develop"
    echo "  git push origin main"
elif [ $errors -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $warnings avertissement(s) - Vous pouvez d√©ployer mais v√©rifiez les warnings${NC}"
else
    echo -e "${RED}‚ùå $errors erreur(s) trouv√©e(s) - Corrigez avant de d√©ployer !${NC}"
    exit 1
fi
echo ""
